// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: remote.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/asynkron/protoactor-go/remote/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RemotingName is the fully-qualified name of the Remoting service.
	RemotingName = "remote.Remoting"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RemotingReceiveProcedure is the fully-qualified name of the Remoting's Receive RPC.
	RemotingReceiveProcedure = "/remote.Remoting/Receive"
	// RemotingListProcessesProcedure is the fully-qualified name of the Remoting's ListProcesses RPC.
	RemotingListProcessesProcedure = "/remote.Remoting/ListProcesses"
	// RemotingGetProcessDiagnosticsProcedure is the fully-qualified name of the Remoting's
	// GetProcessDiagnostics RPC.
	RemotingGetProcessDiagnosticsProcedure = "/remote.Remoting/GetProcessDiagnostics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	remotingServiceDescriptor                     = gen.File_remote_proto.Services().ByName("Remoting")
	remotingReceiveMethodDescriptor               = remotingServiceDescriptor.Methods().ByName("Receive")
	remotingListProcessesMethodDescriptor         = remotingServiceDescriptor.Methods().ByName("ListProcesses")
	remotingGetProcessDiagnosticsMethodDescriptor = remotingServiceDescriptor.Methods().ByName("GetProcessDiagnostics")
)

// RemotingClient is a client for the remote.Remoting service.
type RemotingClient interface {
	Receive(context.Context) *connect.BidiStreamForClient[gen.RemoteMessage, gen.RemoteMessage]
	ListProcesses(context.Context, *connect.Request[gen.ListProcessesRequest]) (*connect.Response[gen.ListProcessesResponse], error)
	GetProcessDiagnostics(context.Context, *connect.Request[gen.GetProcessDiagnosticsRequest]) (*connect.Response[gen.GetProcessDiagnosticsResponse], error)
}

// NewRemotingClient constructs a client for the remote.Remoting service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRemotingClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RemotingClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &remotingClient{
		receive: connect.NewClient[gen.RemoteMessage, gen.RemoteMessage](
			httpClient,
			baseURL+RemotingReceiveProcedure,
			connect.WithSchema(remotingReceiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProcesses: connect.NewClient[gen.ListProcessesRequest, gen.ListProcessesResponse](
			httpClient,
			baseURL+RemotingListProcessesProcedure,
			connect.WithSchema(remotingListProcessesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProcessDiagnostics: connect.NewClient[gen.GetProcessDiagnosticsRequest, gen.GetProcessDiagnosticsResponse](
			httpClient,
			baseURL+RemotingGetProcessDiagnosticsProcedure,
			connect.WithSchema(remotingGetProcessDiagnosticsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// remotingClient implements RemotingClient.
type remotingClient struct {
	receive               *connect.Client[gen.RemoteMessage, gen.RemoteMessage]
	listProcesses         *connect.Client[gen.ListProcessesRequest, gen.ListProcessesResponse]
	getProcessDiagnostics *connect.Client[gen.GetProcessDiagnosticsRequest, gen.GetProcessDiagnosticsResponse]
}

// Receive calls remote.Remoting.Receive.
func (c *remotingClient) Receive(ctx context.Context) *connect.BidiStreamForClient[gen.RemoteMessage, gen.RemoteMessage] {
	return c.receive.CallBidiStream(ctx)
}

// ListProcesses calls remote.Remoting.ListProcesses.
func (c *remotingClient) ListProcesses(ctx context.Context, req *connect.Request[gen.ListProcessesRequest]) (*connect.Response[gen.ListProcessesResponse], error) {
	return c.listProcesses.CallUnary(ctx, req)
}

// GetProcessDiagnostics calls remote.Remoting.GetProcessDiagnostics.
func (c *remotingClient) GetProcessDiagnostics(ctx context.Context, req *connect.Request[gen.GetProcessDiagnosticsRequest]) (*connect.Response[gen.GetProcessDiagnosticsResponse], error) {
	return c.getProcessDiagnostics.CallUnary(ctx, req)
}

// RemotingHandler is an implementation of the remote.Remoting service.
type RemotingHandler interface {
	Receive(context.Context, *connect.BidiStream[gen.RemoteMessage, gen.RemoteMessage]) error
	ListProcesses(context.Context, *connect.Request[gen.ListProcessesRequest]) (*connect.Response[gen.ListProcessesResponse], error)
	GetProcessDiagnostics(context.Context, *connect.Request[gen.GetProcessDiagnosticsRequest]) (*connect.Response[gen.GetProcessDiagnosticsResponse], error)
}

// NewRemotingHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRemotingHandler(svc RemotingHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	remotingReceiveHandler := connect.NewBidiStreamHandler(
		RemotingReceiveProcedure,
		svc.Receive,
		connect.WithSchema(remotingReceiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	remotingListProcessesHandler := connect.NewUnaryHandler(
		RemotingListProcessesProcedure,
		svc.ListProcesses,
		connect.WithSchema(remotingListProcessesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	remotingGetProcessDiagnosticsHandler := connect.NewUnaryHandler(
		RemotingGetProcessDiagnosticsProcedure,
		svc.GetProcessDiagnostics,
		connect.WithSchema(remotingGetProcessDiagnosticsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/remote.Remoting/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RemotingReceiveProcedure:
			remotingReceiveHandler.ServeHTTP(w, r)
		case RemotingListProcessesProcedure:
			remotingListProcessesHandler.ServeHTTP(w, r)
		case RemotingGetProcessDiagnosticsProcedure:
			remotingGetProcessDiagnosticsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRemotingHandler returns CodeUnimplemented from all methods.
type UnimplementedRemotingHandler struct{}

func (UnimplementedRemotingHandler) Receive(context.Context, *connect.BidiStream[gen.RemoteMessage, gen.RemoteMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("remote.Remoting.Receive is not implemented"))
}

func (UnimplementedRemotingHandler) ListProcesses(context.Context, *connect.Request[gen.ListProcessesRequest]) (*connect.Response[gen.ListProcessesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("remote.Remoting.ListProcesses is not implemented"))
}

func (UnimplementedRemotingHandler) GetProcessDiagnostics(context.Context, *connect.Request[gen.GetProcessDiagnosticsRequest]) (*connect.Response[gen.GetProcessDiagnosticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("remote.Remoting.GetProcessDiagnostics is not implemented"))
}
